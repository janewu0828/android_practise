
/**
         * 获取apk包名
         * 
         * @param pm
         * @param archiveFilePath
         * @return
         */
        public static String getArchivePackageName(Context ctx,
                        String archiveFilePath) {
                System.out.println("PakageUtil:" + archiveFilePath);
                PackageInfo pInfo = ctx.getPackageManager().getPackageArchiveInfo(
                                archiveFilePath, PackageManager.GET_ACTIVITIES);
                if (pInfo == null) {
                        return null;
                }
                return pInfo.packageName;
        }

//比较已安装应用和apk签名是否一样
public static boolean IsSignaturesSame(Context ctx, String apkpath)
                        throws IOException, NameNotFoundException,
                        CertificateEncodingException {
                String pack = getArchivePackageName(ctx, apkpath);
                JarFile jarFile = new JarFile(apkpath);
                JarEntry jarEntry = jarFile.getJarEntry("AndroidManifest.xml");
                byte[] readBuffer = new byte[8192];
                Certificate[] certs = PackageUtil.loadCertificates(jarFile, jarEntry,
                                readBuffer);
                Signature[] s1 = new Signature[certs.length];
                for (int i = 0; i < certs.length; i++) {
                        s1 = new Signature(certs.getEncoded());
                }
                Signature[] s2 = ctx.getPackageManager().getPackageInfo(pack,
                                PackageManager.GET_SIGNATURES).signatures;
                return IsSignaturesSame(s1, s2);
        }


//加载签名
public static Certificate[] loadCertificates(JarFile jarFile, JarEntry je,
                        byte[] readBuffer) {
                try {
                        InputStream is = jarFile.getInputStream(je);
                        while (is.read(readBuffer, 0, readBuffer.length) != -1) {
                                // not using
                        }
                        is.close();
                        return je != null ? je.getCertificates() : null;
                } catch (IOException e) {
                        Log.w(TAG,
                                        "Exception reading " + je.getName() + " in "
                                                        + jarFile.getName(), e);
                } catch (RuntimeException e) {
                        Log.w(TAG,
                                        "Exception reading " + je.getName() + " in "
                                                        + jarFile.getName(), e);
                }
                return null;
        }

//比较

        public static boolean IsSignaturesSame(Signature[] s1, Signature[] s2) {
                if (s1 == null) {
                        return false;
                }
                if (s2 == null) {
                        return false;
                }
                HashSet<Signature> set1 = new HashSet<Signature>();
                for (Signature sig : s1) {
                        set1.add(sig);
                }
                HashSet<Signature> set2 = new HashSet<Signature>();
                for (Signature sig : s2) {
                        set2.add(sig);
                }
                // Make sure s2 contains all signatures in s1.
                if (set1.equals(set2)) {
                        return true;
                }
                return false;
        }